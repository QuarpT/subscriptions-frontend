AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for Identity Account Deletion step function and constituent lambdas"

Parameters:
  etClientId:
    Type: String
    Description: ExactTarget client ID

  etClientSecret:
    Type: String
    Description: ExactTarget client secret

  etUserhelpEmail:
    Type: String
    Description: Userhelp ExactTarget email address

  etJobsUserhelpEmail:
    Type: String
    Description: Jobs Userhelp ExactTarget email address

  lambdaCodeS3Bucket:
    Type: String
    Description: S3 bucket name containing the Lambda code

  lambdaCodeS3Key:
    Type: String
    Description: Package (.zip, .jar) in S3 containing the Lambda code

  kmsKeyId:
    Type: String
    Description: KMS key ID

Resources:

  # ****************************************************************************
  # Step Function
  # ****************************************************************************
  AccountDeletion:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          |-
          {
            "Comment": "If automatic deletion criteria is satisfied, deletes the user, otherwise notifies Userhelp for manual deletion.",
            "StartAt": "CheckDeletionCriteriaInParallel",

            "States": {
              "CheckDeletionCriteriaInParallel": {
                "Type": "Parallel",
                "Next": "isAutoDeletionCriteriaSatisfied",
                "Branches": [
                  {
                    "StartAt": "userIsNotSubscriber",
                    "States": {
                      "userIsNotSubscriber": {
                        "Type": "Task",
                        "ResultPath": "$.deletionCriterion",
                        "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:userIsNotSubscriber",
                        "End": true
                      }
                    }
                  },
                  {
                    "StartAt": "userIsNotMember",
                    "States": {
                      "userIsNotMember": {
                        "Type": "Task",
                        "ResultPath": "$.deletionCriterion",
                        "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:userIsNotMember",
                        "End": true
                      }
                    }
                  },
                  {
                    "StartAt": "userIsValidated",
                    "States": {
                      "userIsValidated": {
                        "Type": "Task",
                        "ResultPath": "$.deletionCriterion",
                        "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:userIsValidated",
                        "End": true
                      }
                    }
                  }
                ]
              },
              "isAutoDeletionCriteriaSatisfied": {
                "Type": "Task",
                "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:isAutoDeletionCriteriaSatisfied",
                "Next": "chooseAccountDeletionType"
              },
              "chooseAccountDeletionType": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.criteriaSatisfied",
                    "BooleanEquals": true,
                    "Next": "AutoDeletion"
                  },
                  {
                    "Variable": "$.criteriaSatisfied",
                    "BooleanEquals": false,
                    "Next": "ManualDeletion"
                  }
                ]
              },
              "UnsubscribeFromAllMailingLists": {
                "Type": "Task",
                "InputPath": "$.credentials.stateMachineInput.CiphertextBlob",
                "ResultPath": "$.unsubscribedEmails",
                "OutputPath": "$",
                "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:unsubscribeEmails",
                "Next": "DeleteUser"
              },
              "userHasNoJobs": {
                "Type": "Task",
                "ResultPath": "$.userHasNoJobs",
                "OutputPath": "$",
                "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:userHasNoJobs",
                "Next": "ChooseAutoDeletionType"
              },
              "ChooseAutoDeletionType": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.userHasNoJobs",
                    "BooleanEquals": true,
                    "Next": "UnsubscribeFromAllMailingLists"
                  },
                  {
                    "Variable": "$.userHasNoJobs",
                    "BooleanEquals": false,
                    "Next": "NotifyJobsUserhelp"
                  }
                ]
              },
              "AutoDeletion": {
                "Type": "Pass",
                "Next": "userHasNoJobs"
              },
              "DeleteUser": {
                "Type": "Task",
                "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:deleteUser",
                "Next": "PublishDeletion"
              },
              "PublishDeletion": {
                "Type": "Task",
                "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:publishDeletion",
                "Retry": [{
                  "ErrorEquals": ["States.ALL"],
                  "MaxAttempts": 3
                }],
                "Catch": [{
                  "ErrorEquals": ["States.ALL"],
                  "Next": "CatchAllFallback"
                }],
                "End": true
              },
              "CatchAllFallback": {
                "Type": "Pass",
                "Result": "This is a fallback from any error code (REMOVE WHEN NOTIFY IS WORKING)",
                "End": true
              },
              "ManualDeletion": {
                "Type": "Pass",
                "Next": "NotifyUserhelp"
              },
              "NotifyUserhelp": {
                "Type": "Task",
                "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:notifyUserhelp",
                "End": true
              },
              "NotifyJobsUserhelp": {
                "Type": "Task",
                "ResultPath": null,
                "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:notifyUserhelp",
                "Next": "UnsubscribeFromAllMailingLists"
              }
            }
          }
      RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/StatesExecutionRole-eu-west-1


  # ****************************************************************************
  # API Gateway
  # ****************************************************************************
  Api:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: Account Deletion API that forntend hits to kick-off the account deletion step function
      Name: Account Deletion

  ApiDeleteResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: delete
    DependsOn: Api

  ApiDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      RestApiId: !Ref Api
      ResourceId: !Ref ApiDeleteResource
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${startAccountDeletion.Arn}/invocations
    DependsOn:
      - Api
      - ApiDeleteResource
      - startAccountDeletion

  ApiDeploymentDEV:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: ApiDeleteMethod
    Properties:
      RestApiId: !Ref Api
      Description: "Development stage"
      StageName: "DEV"

  ApiDeploymentPROD:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: ApiDeleteMethod
    Properties:
      RestApiId: !Ref Api
      Description: "Production stage"
      StageName: "PROD"

  ApiKeyDEV:
    Type: "AWS::ApiGateway::ApiKey"
    DependsOn: ApiDeploymentDEV
    Properties:
      Name: account-deletion-DEV
      Description: Client Key for DEV Account Deletion API
      Enabled: "true"
      StageKeys:
        - RestApiId: !Ref Api
          StageName: DEV

  ApiKeyPROD:
    Type: "AWS::ApiGateway::ApiKey"
    DependsOn: ApiDeploymentPROD
    Properties:
      Name: account-deletion-PROD
      Description: Client Key for PROD Account Deletion API
      Enabled: "true"
      StageKeys:
        - RestApiId: !Ref Api
          StageName: PROD

  ApiUsagePlanPROD:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ApiDeploymentPROD
    Properties:
      ApiStages:
      - ApiId: !Ref Api
        Stage: PROD
      Description: PROD Account Deletion API usage plan
      UsagePlanName: AccountDeletionUsagePlanPROD

  ApiUsagePlanKeyPROD:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties :
      KeyId: !Ref ApiKeyPROD
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlanPROD

  ApiUsagePlanDEV:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ApiDeploymentDEV
    Properties:
      ApiStages:
      - ApiId: !Ref Api
        Stage: DEV
      Description: DEV Account Deletion API usage plan
      UsagePlanName: AccountDeletionUsagePlanDEV

  ApiUsagePlanKeyDEV:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties :
      KeyId: !Ref ApiKeyDEV
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlanDEV

  AccountDeletionsTopicPROD:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: com-gu-identity-account-deletions-PROD

  AccountDeletionsTopicDEV:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: com-gu-identity-account-deletions-DEV


  # ****************************************************************************
  # Lambdas
  # ****************************************************************************
  startAccountDeletion:
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: startAccountDeletion
        Description: Execute Account Deletion step function
        Handler: "startAccountDeletion.handler"
        Role: !Sub arn:aws:iam::${AWS::AccountId}:role/APIGatewayAWSProxyStepFunctionsExecRole
        Code:
          S3Bucket: !Ref lambdaCodeS3Bucket
          S3Key: !Ref lambdaCodeS3Key
        Runtime: "nodejs4.3"
        MemorySize: "512"
        Timeout: "90"
        Environment:
          Variables:
            STATE_MACHINE_ARN: !GetAtt AccountDeletion.Name
            KMS_KEY_ID: !Ref kmsKeyId

  userIsNotMember:
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: userIsNotMember
        Description: Returns true if user is not a member
        Handler: "userIsNotMember.handler"
        Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda_basic_execution
        Code:
          S3Bucket: !Ref lambdaCodeS3Bucket
          S3Key: !Ref lambdaCodeS3Key
        Runtime: "nodejs4.3"
        MemorySize: "512"
        Timeout: "10"

  userIsNotSubscriber:
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: userIsNotSubscriber
        Description: Returns true if user is not a DigiPack subscriber
        Handler: "userIsNotSubscriber.handler"
        Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda_basic_execution
        Code:
          S3Bucket: !Ref lambdaCodeS3Bucket
          S3Key: !Ref lambdaCodeS3Key
        Runtime: "nodejs4.3"
        MemorySize: "512"
        Timeout: "10"

  userHasNotCommented:
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: userHasNotCommented
        Description: Returns true if user has not commented
        Handler: "userHasNotCommented.handler"
        Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda_basic_execution
        Code:
          S3Bucket: !Ref lambdaCodeS3Bucket
          S3Key: !Ref lambdaCodeS3Key
        Runtime: "nodejs4.3"
        MemorySize: "512"
        Timeout: "10"

  userHasNoJobs:
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: userHasNoJobs
        Description: Returns true if user has no Jobs account
        Handler: "userHasNoJobs.handler"
        Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda_basic_execution
        Code:
          S3Bucket: !Ref lambdaCodeS3Bucket
          S3Key: !Ref lambdaCodeS3Key
        Runtime: "nodejs4.3"
        MemorySize: "256"
        Timeout: "10"

  userIsValidated:
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: userIsValidated
        Description: Returns true if user's email address has been validated
        Handler: "userIsValidated.handler"
        Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda_basic_execution
        Code:
          S3Bucket: !Ref lambdaCodeS3Bucket
          S3Key: !Ref lambdaCodeS3Key
        Runtime: "nodejs4.3"
        MemorySize: "512"
        Timeout: "10"

  isAutoDeletionCriteriaSatisfied:
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: isAutoDeletionCriteriaSatisfied
        Description: Returns true if all the criteria for automatic account deletion is satisfied
        Handler: "isAutoDeletionCriteriaSatisfied.handler"
        Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda_basic_execution
        Code:
          S3Bucket: !Ref lambdaCodeS3Bucket
          S3Key: !Ref lambdaCodeS3Key
        Runtime: "nodejs4.3"
        MemorySize: "512"
        Timeout: "10"

  unsubscribeEmails:
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: unsubscribeEmails
        Description: Unsubscribe from all mailing lists in ExactTarget via Identity
        Handler: "com.gu.MyHandler"
        Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda_basic_execution
        Code:
          S3Bucket: !Ref lambdaCodeS3Bucket
          S3Key: unsubscribe-emails.jar
        Runtime: "java8"
        MemorySize: "1024"
        Timeout: "30"

  deleteUser:
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: deleteUser
        Description: Delete user from Identity Mongo DB
        Handler: "deleteUser.handler"
        Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda_basic_execution
        Code:
          S3Bucket: !Ref lambdaCodeS3Bucket
          S3Key: !Ref lambdaCodeS3Key
        Runtime: "nodejs4.3"
        MemorySize: "512"
        Timeout: "20"

  notify:
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: notify
        Description: Publish account deletion events to SNS
        Handler: "notify.handler"
        Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda_basic_execution
        Code:
          S3Bucket: !Ref lambdaCodeS3Bucket
          S3Key: !Ref lambdaCodeS3Key
        Runtime: "nodejs4.3"
        MemorySize: "512"
        Timeout: "10"

  notifyUserhelp:
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: notifyUserhelp
        Description: Send an email to Userhelp notifying them to perform manual deletion
        Handler: "notifyUserhelp.handler"
        Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda_basic_execution
        Code:
          S3Bucket: !Ref lambdaCodeS3Bucket
          S3Key: !Ref lambdaCodeS3Key
        Runtime: "nodejs4.3"
        MemorySize: "512"
        Timeout: "10"
        Environment:
          Variables:
            CLIENT_SECRET: !Ref etClientSecret
            CLIENT_ID: !Ref etClientId
            USERHELP_EMAIL: !Ref etUserhelpEmail
            JOBS_USERHELP_EMAIL: !Ref etJobsUserhelpEmail
